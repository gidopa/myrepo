메소드?
	- 특정 기능 처리를 위한 코드를 묶어 놓은 작은 모듈(함수의 일종)
메소드의 종류
	1. 인스턴스 메소드
	-메서드는 변수에 대한 작업 -> 인스턴스 메서드는 인스턴스라는 변수가 필요함.
	-객체를 생성하고 그 객체에 대해 사용
	-인스턴스 메서드는 static이 붙은 멤버(변수,메서드) 사용이 항상 가능 -> 인스턴스 변수가 존재한다는 건 static 변수가 이미 메모리에 있음
	-메서드 앞에 static이 붙지 않음
	2. 클래스(static) 메서드
	- 객체 없이 바로 사용가능
	- 클래스가 메모리에 올라갈때 같이 올라감
	- 인스턴스 변수 또는 메서드를 사용할시 인스턴스 멤버 변경으로 클래스 메서드가 전체 인스턴스에 영향을 미칠 수 있기 때문에 클래스 메서드(스태틱 메서드)에서는 인스턴스 멤버 사용을 금지한다. 
	  만약 쓰고 싶다면 객체 생성후 불러오기는 가능
	


	
사용자 정의 메소드?
	- 개발자의 필요에 의해 만들어 사용하는 메소드
	
사용자 정의 메소드 생성 문법
	그림
		접근제어자 (return할 자료형/없으면 void) 메소드이름(parameter) <- 메소드의 선언부/머릿부
		{
			메소드의 기능 작성;			<-메소드의 몸체
		}	
	
Hello World 출력 MethodEx01

메서드 호출하면서 매개변수로 값을 전달하는 방법
	
		public static void hello_func(){
			
		}
	hello_func 메서드는 호출할 때 파라미터가 없어 데이터를 넘겨주지 않고 코드 실행

		public static int Sum(int n){
			return n += n
		}
	변수 n은 메서드를 호출할때 전달 받은 값을 담아두기 위한 기억장소
	이 변수를 형식 매개변수라고 부름
	메서드를 만드는 사람은 매개변수 n에 어떤 값이 올지 모르고 자료형만 맞으면 유효 -> 형식매개변수
	
		Sum(5);	<- Sum 이라는 이름의 메서드 호출시 5를 전달
	
예제 주어진 값까지 자연수의 합을 구하는 프로그램 MethodEx02